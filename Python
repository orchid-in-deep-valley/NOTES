数据类型：
  Numbers（数字）
  String（字符串）
  List（列表）
  Tuple（元组）
  Dictionary（字典）

列表：可二次读写，可读写序列
列表创建：
  list_01 = [1,2,3,4,5]
元组：不可二次读写，只读序列
元组创建：
  tuple_01 = (1,2,3,4,5)
 tips: range(start,stop)创建的序列是列表

序列的生成:
  使用range()函数;
  如range(10,20)生成10到19
    range(10,20,2)10到19间隔为2
    
    
字典：键值对序列
  创建及各种操作：
    dict = {"Name":"Hari","Age":18,"id":1}; #创建字典
    print dict                              
    dict["Name"]="Mari"                     #修改指定数值
    print dict
    del dict["id"]                          #删除指定项
    print dict
    dict["id"] = 12                         #修改指定项数值
    print dict
    dict.clear()                            #清空字典
    print dict
    
索引迭代:
  使用enumerate()函数:
    dict = {
      'Hari':10,
      'Mari':20
      }
    for key,value in enumerate(dict):
      print key,'-',value
迭代字典中的value:
  使用dict属性中的itervalues()函数:
      dict = {
      'Hari':10,
      'Mari':20
      }
      for value in dict.itervalues():
        print value
        
for...else 条件循环
例:
  primeTuple = range(1,50)
  for num in primeTuple:
     for i in range(2,num):
        if num%i == 0:                            #能够整除2时即为素数
           if num/i == num%i:                     #排除2的特殊情况
              continue                            #正常跳出
           else:
              print '%d not prime number.'%(num)  #打印非素数
              break                               #非正常跳出
     else:
        print '%d is prime number'%(num)          #打印素数

时间和日期：
  使用前导入time模块：
    import time
  例：
  import time

#获得时间戳
ticks = time.time()
#获得时间元组
localTime = time.localtime(ticks)
#将时间元组转换成asc格式时间
ascTime = time.asctime(localTime)
print ascTime
# 格式化成2016-03-20 11:45:39形式
print time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()) 

# 格式化成Sat Mar 28 22:24:24 2016形式
print time.strftime("%a %b %d %H:%M:%S %Y", time.localtime()) 
  
# 将格式字符串转换为时间戳
a = "Sat Mar 28 22:24:24 2016"
print time.mktime(time.strptime(a,"%a %b %d %H:%M:%S %Y"))

python中时间日期格式化符号：
%y 两位数的年份表示（00-99）
%Y 四位数的年份表示（000-9999）
%m 月份（01-12）
%d 月内中的一天（0-31）
%H 24小时制小时数（0-23）
%I 12小时制小时数（01-12）
%M 分钟数（00=59）
%S 秒（00-59）
%a 本地简化星期名称
%A 本地完整星期名称
%b 本地简化的月份名称
%B 本地完整的月份名称
%c 本地相应的日期表示和时间表示
%j 年内的一天（001-366）
%p 本地A.M.或P.M.的等价符
%U 一年中的星期数（00-53）星期天为星期的开始

文件操作：
例：
  import os

  #打开文件，第一个参数为文件名，第二个参数为打开模式
  #  a：追加 b：二进制模式打开 r：只读模式 w：只写模式 +：读写模式
  fo = open('foo.txt','a+')

  filename = fo.name          #文件名    
  filemode = fo.mode          #文件访问模式
  fileclosed = fo.closed      #文件是否已经关闭

  fo.write('HELLO WORLD!')    #写入文件内容,可字符串可二进制
  fo.tell()                   #返回文件指针当前位置
  fo.seek(0)                  #将文件指针位置移动到文件头
  str =fo.read()              #读取文件数据
  fo.close()                  #关闭文件
  print str

  os.rename("foo.txt","documents3.txt")       #文件重命名
  fo = open('documents3.txt','r')             #新的文件名在当前目录不能有同名文件
  print fo.name
  fo.close()                                  #文件使用完切记关闭文件
  os.remove('documents3.txt')                 #删除文件

文件夹操作：
例：
  import os

  #创建文件夹
  os.mkdir('Newdir')
  #获得当前工作目录名称
  os.getcwd()
  #工作目录移动
  os.chdir('..')
  os.chdir('Demo')
  os.getcwd()
  #删除文件夹
  os.rmdir('Newdir')

map函数:
  map(function,list)
 对传入的序列逐一的放入funtion中再将结果以序列方式返回
 例：
    def addition(num):
    return num+2
    list = map(addition,range(1,10))
    for value in list:
      print value
    #输出	
      3
      4
      5
      6
      7
      8
      9
      10
      11
reduce函数:
  reduce(function,list)根据function对list进行浓缩，其中function需要两个参数
  例：
    >>> def func(x,y):
      return x+y
    >>> num = reduce(func,range(0,10))
    >>> print num
    45
filter函数:
  过滤器，filter(function,list),返回list中符合function要求的量
  例：
  >>> def filterFunc(value):
	return value%2 == 0

  >>> list = filter(filterFunc,range(0,10))
  >>> print list
  [0, 2, 4, 6, 8]
lambda匿名函数:
  lambda 函数参数:表达式
  例：
  >>> list = filter(lambda x:x%2==0,range(0,10))
  >>> prrint list
  >>> print list
  [0, 2, 4, 6, 8]
